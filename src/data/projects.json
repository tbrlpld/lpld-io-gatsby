[
  {
    "name": "Wagtail Gatsby Blog (Frontend)",
    "description": "Frontend for a prototype Wagtail-Gatsby blog",
    "extendedDescription": "I created this project to figure out how I can use Wagtail as a headless CMS for a static website build with Gatsby. The <a href='/wagtail-gatsby-blog-(backend)'>backend</a> makes use of Wagtail-Grapple to create the GraphQL endpoint. The GraphQL endpoint is consumed on the frontend with the help of the gatsby-source-wagtail plugin.<br /><br />I have also implemented a few features on the frontend that are not typically provided by the Wagtail-Grapple and gatsby-source-wagtail combination. For example, the GraphQL schema on the backend is extended to include page tags. The frontend Gatsby build is extended to create index pages for each of the tags and a index of all tags. I have also added a function to the build that downloads documents (like PDFs) from the Wagtail backend and includes them in the build. This allows the documents to be served with the frontend from a CDN.",
    "image": "wagtail-gatsby-blog-frontend.png",
    "imageIsMacWindowScreenshot": true,
    "github": "https://github.com/tbrlpld/wagtail-gatsby-blog-frontend",
    "live": "",
    "technologies": "JavaScript, React, Gatsby, Gatsby-Source-Wagtail, Wagtail, Wagtail-Grapple, GraphQL, Headless-CMS, "
  },
  {
    "name": "Wagtail Gatsby Blog (Backend)",
    "description": "Backend for a prototype Wagtail-Gatsby blog",
    "extendedDescription": "I created this project to figure out how I can use Wagtail as a headless CMS for a static website build with Gatsby. The backend makes use of Wagtail-Grapple to create the GraphQL endpoint. The GraphQL endpoint is consumed on the <a href='/wagtail-gatsby-blog-(frontend)'>frontend</a> with the help of the gatsby-source-wagtail plugin.<br /><br />I have also implemented a few features that are typically not part of the default functionality that Wagtail-Grapple enables. For example, I have enabled the \"live\" links in the Wagtail-Admin to redirect to the frontend via a custom mixin for the page model. I have also extended the default GraphQL schema with Graphene-Django to enable the page tagging to work in a headless setup. The repo also contains a Vagrantfile to simulate running the containerized backend on the production server with a restricted shell non-root user.",
    "image": "wagtail-gatsby-blog-backend.png",
    "imageIsMacWindowScreenshot": true,
    "github": "https://github.com/tbrlpld/wagtail-gatsby-blog-backend",
    "live": "",
    "technologies": "Python, Django, Wagtail, Wagtail-Grapple, Headless-CMS, Gatsby, GraphQL, Graphene, Graphene-Django, Poetry, Docker, Vagrant"
  },
  {
    "name": "Logtweet",
    "description": "Command line tool to create a tweet based on a #100DaysOfCode log message",
    "extendedDescription": "This is the first package I have published on PyPI. I have used this tool to tweet my daily progress during the #100DaysOfCode challenge.<br /><br />Tweets are generated based on an HTML log of a given format. I used <a href='/log100days-(gatsby)'>another project of mine (Log100Days)</a> to generate the HTML site from my Markdown journaling repo. The fact that the tool currently requires the log to be published as HTML is certainly not ideal. Since that HTML is generated from a Markdown log anyways, it would be a great addition to directly generate the tweet from the Markdown log. Unfortunately I have not gotten around to that feature yet.",
    "image": "logtweet.png",
    "imageIsMacWindowScreenshot": true,
    "github": "https://github.com/tbrlpld/logtweet",
    "live": "https://pypi.org/project/logtweet/",
    "technologies": "Python, BeautifulSoup, web-scraping, Pytest, Twitter-API, mypy, "
  },
  {
    "name": "Log100Days (Gatsby)",
    "description": "Gatsby project to render a #100DaysOfCode markdown log into a static website",
    "extendedDescription": "I used this app to display <a href='https://github.com/tbrlpld/100-days-of-code' target='_blank'>my Markdown log</a>, that I used to document progress during the #100DaysOfCode challenge, as a website. This is the static version of a <a href='/log100days-(quart)'>dynamic Flask/Quart app</a> I had created as a learning exercise during the challenge. I switched to this static version, because it fits the static nature (updated once a day) of the content better and should be much more efficient for this purpose. I also wanted to practice Gatsby.<br/><br/>This project is a little different from the typical Gatsby project that generates HTML from Markdown files in that the Markdown files live in their own separate repository. To still have the site rebuild automatically when the content is updated, I added <a href='https://github.com/tbrlpld/100-days-of-code/blob/master/.github/workflows/update-netlify.yml'>a simple GitHub action</a> to the content repository that triggers the Netlify build hook.",
    "image": "log100days-gatsby.png",
    "imageIsMacWindowScreenshot": true,
    "github": "https://github.com/tbrlpld/log100days-gatsby",
    "live": "https://log100days.lpld.io",
    "technologies": " JavaScript, React, JSX, Gatsby, CSS Modules, GitHub Actions, Netlify"
  },
  {
    "name": "Log100Days (Quart)",
    "description": "Containerized Quart app to display a markdown log for the #100DaysOfCode challenge as a website",
    "extendedDescription": "This app was initially build as a Flask learning exercise  and later on turned into a Quart app. Because Quart uses basically the same API as Flask, the changes where minimal but allowed the app to enjoy the asynchronous performance benefits.<br/><br/>The performance improvement through async are especially valuable in this app, because it pulled in external data (Markdown) and converted it into HTML on every request. Of course, that is still not a great process for an app that displays content that is only updated once per day. Because of that, I have also created <a href='/log100days-(gatsby)'>Log100Days (Gatsby)</a>, which generates a static site upon every update in the Markdown repository (which is way more efficient than even the async version of the dynamic app).",
    "image": "log100days-quart.png",
    "imageIsMacWindowScreenshot": true,
    "github": "https://github.com/tbrlpld/log100days",
    "live": "",
    "technologies": "Python, Flask, Quart, Asyncio, Docker"
  },
  {
    "name": "Short",
    "description": "URL shortener app, build with Flask and AWS Dynamo DB and deployed with Zappa to AWS Lambda",
    "extendedDescription": "During the #100DaysOfCode challenge I was not only keeping a <a href='https://log100days.lpld.io' target='_blank'>log of my progress</a>, but also <a href='https://twitter.com/tbrlpld' target='_blank'>tweeting</a> about it. In those tweets I also typically included a link to the commit showing the code I had created that day. Because of the size length limitation of tweets, I did not want to waste characters on the link (which is typically pretty long when linking to a specific commit on GitHub) and therefore used URL shortener services like Bit.ly or TinyURL.<br/><br/>When I was trying to come up with a new project idea, I thought I could just replace the use of these external services and create my own URL shortener. And so I did. Short is certainly not as feature rich as some of the shortener services out there (e.g. no analytics) but it provides the basic functionality that I was looking for. I also included a public API endpoint that allowed me to make use of Short in <a href='/logtweet'>my command line tool (Logtweet)</a> to generate tweets based on my #100DaysOfCode log.",
    "image": "short.gif",
    "imageIsMacWindowScreenshot": false,
    "github": "https://github.com/tbrlpld/short",
    "technologies": "Python, Flask, Zappa, AWS DynamoDB, AWS Lamba"
  },
  {
    "name": "Flaskr",
    "description": "Flask based blog app build as an extended version of the Flask tutorial",
    "extendedDescription": "Flaskr is the typical app that you create when going through the <a href='https://flask.palletsprojects.com/en/1.1.x/tutorial/' target='_blank'>Flask tutorial</a>. In the end of the tutorial you have a working blog application with user authentication and CRUD features for the blog posts.<br/><br/>The interesting part of the tutorial really starts on <a href='https://flask.palletsprojects.com/en/1.1.x/tutorial/next/' target='_blank'>the last page</a>, where it is suggested to continue the development by adding features like: detail post view, likes, comments, tags, title search, pagination, image upload, markdown formatting and RSS feed. I did implement each of these features and found it be a really tremendous learning experience. The experience not only thought me Flask, but Python and web development in general.",
    "image": "flaskr.png",
    "imageIsMacWindowScreenshot": true,
    "github": "https://github.com/tbrlpld/flaskr",
    "live": "",
    "technologies": "Python, Flask, Jinja, Test Driven Development, Pytest, Coverage"
  },
  {
    "name": "CAE Job Diary",
    "description": "Web application to search, track and summarize CAE simulation jobs",
    "extendedDescription": "I developed CAE Job Dairy as a side project to help me stay organized in my former day job as a <a href='https://en.wikipedia.org/wiki/Crash_simulation' target='_blank'>CAE simulation</a> and development engineer for automotive safety.<br/><br/>Simulation jobs added to the solver server cluster are polled and the submission information is automatically added to the web app. Changes to the jobs status are automatically update in the web app and you can leave a result summary after you analyzed your job. The web interface allows you to add summary notes and categorize the outcome of the simulation. You can also use the web app to search and filter jobs (by project and/or user).<br/><br/>CAE Job Dairy is probably the most complex app I have developed thus far (2020). Not because of the web app frontend. The frontend is extremely simple and does not even have user authentication (it was a feature idea but not necessary for the tiny user base at first). The complexities come in because of the different data files it has to parse, the events and conditions and connected race conditions on the file system it has to deal with. It was also my first larger app and I have learned a great deal about how to structure software since then. I probably would not build it like this again. Especially the coupling between the backend parsing processes and the Django web app have shown some significant down sides.",
    "image": "caejd.png",
    "imageIsMacWindowScreenshot": false,
    "github": "https://github.com/tbrlpld/caejobdiary",
    "live": "",
    "technologies": "Python, Django, GitLab CI, Docker, MySQL, Bootstrap"
  },
  {
    "name": "PlotGraph",
    "description": "Sublime Text package to plot number columns as graphs",
    "extendedDescription": "PlotGraph is a <a href='https://www.sublimetext.com/' target='_blank'>Sublime Text</a> plugin to plot a column of numbers as a graph, or create a quick curve comparison based on multiple number columns.<br/><br/>I created PlotGraph because I was looking for a way to be able to visualize number columns in plain text files as graphs or curve comparisons. This was a useful tool for me in my former day job, as a <a href='https://en.wikipedia.org/wiki/Crash_simulation' target='_blank'>CAE simulation</a> and development engineer for automotive safety, because simulation files often contain many time history or stress-strain curves.",
    "image": "plotgraph.png",
    "imageIsMacWindowScreenshot": false,
    "github": "https://github.com/tbrlpld/PlotGraph",
    "live": "",
    "technologies": "Python, Matplotlib, Sublime Text"
  },
  {
    "name": "100 Days Of Web in Python",
    "description": "45 (mini) projects I created from the \"100 Days Of Web in Python\" course during the 100DaysOfCode challenge",
    "extendedDescription": "During the #100DaysOfCode challenge I worked through the projects defined in the <a href='https://training.talkpython.fm/courses/explore_100days_web/100-days-of-web-in-python' target='_blank'>\"100 Days Of Web in Python\" course</a> by <a href='https://talkpython.fm/home' target='_blank'>TalkPython</a> and <a href='http://pybit.es' target='_blank'>PyBites</a>. The course is structured into four day segments focused on a specific technology. In the first two days you would be introduced to a new technology and follow along the course videos to learn the basics. For the following two days you were given a small project idea for the introduced  (or had to come up with one) to implement independently by yourself.<br/><br/>Over the 100 days of the course, I learned a great variety of new technologies and created 45 (more or less small) projects. Most of those projects where create in a few hours over the later two days of a given segment. Other projects I have spent a bit more time on and have extracted them into their own repositories. The <a href='/tic-tac-toe'>React Tic-Tac-Toe game</a> and <a href='/short'>Short</a> are examples of those extracted projects.",
    "image": "100days-screencast.gif",
    "imageIsMacWindowScreenshot": false,
    "github": "https://github.com/tbrlpld/100daysofweb-with-python-course",
    "live": "",
    "technologies": "API, API-Star, Alembic, Asyncio, CSS, DOM, Django, Django-Rest-framework, Docker, Flask, HTML, Heroku, JavaScript, Markdown, Nginx, Pelican, Pyramid, Python, Quart, REST, React, Requests, Responder, SQLAlchemy, Selenium, Static-Site-Generator, Twilio, Vuejs, mypy"
  },
  {
    "name": "Tic-Tac-Toe",
    "description": "Tic-Tac-Toe game created in React",
    "extendedDescription": "",
    "image": "tictactoe.gif",
    "imageIsMacWindowScreenshot": false,
    "github": "https://github.com/tbrlpld/tictactoe",
    "live": "https://tictactoe.lpld.io",
    "technologies": "JavaScript, React, JSX"
  },
  {
    "name": "Remember Me",
    "description": "Web browser memory game (created for the Udacity Nanodegree \"Intro to Programming\")",
    "extendedDescription": "I created RememberMe as the topic of my final project for the Udacity Nanodegree \"Intro to Programming\". The functional requirements (memory game logic, timer, move counter, star rating, congratulations, etc.) were predefined. A design mock-up was also provided, but not strictly required for implementation. My design is inspired by the mock-up but does not follow it closely. It was the goal of the project to turn the given functional requirements into a working JavaScript browser game. Apart from the required functionality, the game includes CSS animations for card flipping, pair rejection and pair matching.",
    "image": "rememberme.png",
    "imageIsMacWindowScreenshot": false,
    "github": "https://github.com/tbrlpld/remember-me",
    "live": "https://rememberme.lpld.io",
    "technologies": "JavaScript, jQuery, HTML, CSS"
  },
  {
    "name": "Fill in the Gaps",
    "description": "Command line fill-in-the-gaps quiz game (created for the Udacity Nanodegree \"Intro to Programming\")",
    "extendedDescription": "This is a simple python command line game quiz game I created during the Udacity Nanodegree \"Intro to Programming\".<br/><br/>The player can select one of three levels (easy, medium or hard) which define the quiz that will be shown. The player can select the number of wrong guesses allowed (default is&nbsp;3). Once both choices are made, the game starts.<br/><br/>During the game, the player is presented with a paragraph of text with certain words blanked out. the player is asked to fill one gap after the other. Once all gaps are filled correctly, the game ends with a win for the player. If the player makes wrong guess, then a counter is increased and the same question is presented again. If the player exceeds the number of allowed wrong guesses before all blanks are filled correctly then the game ends with a loss.",
    "image": "fill-in-the-gaps.gif",
    "imageIsMacWindowScreenshot": false,
    "github": "https://github.com/tbrlpld/fill-in-the-gaps",
    "live": "",
    "technologies": "Python"
  },
  {
    "name": "Tribute Page",
    "description": "Simple responsive tribute webpage for John Horton Conway (created for the freeCodeCamp Responsive Web Design certificate)",
    "extendedDescription": "",
    "image": "fcc-tribute-page.jpg",
    "imageIsMacWindowScreenshot": false,
    "github": "",
    "live": "https://codepen.io/tbrlpld/full/LYpbeRg",
    "technologies": "HTML, CSS"
  },
  {
    "name": "Technical Documentation",
    "description": "Simple responsive technical documentation page for Logtweet (created for the freeCodeCamp Responsive Web Design certificate)",
    "extendedDescription": "",
    "image": "fcc-technical-documentation.png",
    "imageIsMacWindowScreenshot": false,
    "github": "",
    "live": "https://codepen.io/tbrlpld/full/rNOpZgo",
    "technologies": "HTML, CSS"
  },
  {
    "name": "Product Landing Page",
    "description": "Simple responsive product landing page for my favorite beers (created for the freeCodeCamp Responsive Web Design certificate)",
    "extendedDescription": "",
    "image": "fcc-product-landing-page.png",
    "imageIsMacWindowScreenshot": false,
    "github": "",
    "live": "https://codepen.io/tbrlpld/full/ExVXrQo",
    "technologies": "HTML, CSS"
  },
  {
    "name": "Survey Form",
    "description": "Simple responsive survey form (created for the freeCodeCamp Responsive Web Design certificate)",
    "extendedDescription": "",
    "image": "fcc-survey-form.png",
    "imageIsMacWindowScreenshot": false,
    "github": "",
    "live": "https://codepen.io/tbrlpld/full/KKdaEzb",
    "technologies": "HTML, CSS"
  }
]